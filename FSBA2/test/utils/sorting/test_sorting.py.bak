# this is importing BaseModuleTestCase from 
# the tests/utils/sorting/__init__.py
#from . import BaseSortingTestCase
#
import sys
sys.path.append("../../../")
from utils.sorting import *
#
#import random
import unittest

import inspect

def function_name():
    print(inspect.stack()[1][3])

class ParametrizedTestCase(unittest.TestCase):
    def __init__(self, testName, f=None):
        super(SortingTestCase, self).__init__(testName)
        self.func = f

    def setUp(self):
        super().setUp()
        print(self._testMethodName)

    def tearDown(self):
        print("OK\n")

class SortingTestCase(unittest.TestCase):
    def __init__(self, testName, f=None):
        super(SortingTestCase, self).__init__(testName)
        self.func = f

    def setUp(self):
        super().setUp()
        print(self._testMethodName)

    def test_EmptyList(self):
        self.assertEqual(self.func([]),[])

    def test_OneElem(self):
        self.assertEqual(self.func([0]), [0])

    def test_ThreeElemASC(self):
        self.assertEqual(self.func([0,1,2]), [0,1,2])

    def test_ThreeElemDESC(self):
        self.assertEqual(self.func([2,1,0]), [0,1,2])

    def tearDown(self):
        print("OK\n")




for f in [qsort, msort, insertionsort, selectionsort, bubblesort]:
    print()
    print(f.__name__)
    print("-" * len(f.__name__))
    suite = unittest.TestSuite()
    for testName in (testName for _, testName in SortingTestCase.__dict__.items() if callable(testName) and testName.__name__[:4] == "test"):
        suite.addTest(SortingTestCase(testName.__name__, f=f))
    unittest.TextTestRunner().run(suite)

#unittest.TextTestRunner(verbosity=2).run(suite)
        




